from flask import Flask, request, jsonify, make_response
from flask_cors import CORS  
from models import db, Patent, Company, Report
from os import environ
from analysis import PatentAnalyzer
import traceback
import logging
from functools import wraps

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Create the Flask app
app = Flask(__name__)

# Enable CORS for all routes
CORS(app)

# Set up the database
app.config['SQLALCHEMY_DATABASE_URI'] = environ.get('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize the database
db.init_app(app)

# Initialize the PatentAnalyzer
analyzer = PatentAnalyzer(openai_api_key=environ.get('OPENAI_API_KEY'))

#def log_endpoint(f):
#    @wraps(f)
#    def decorated_function(*args, **kwargs):
#        try:
#            # Log request details
#            logger.debug(f"Request Headers: {dict(request.headers)}")
#            logger.debug(f"Request Body: {request.get_json()}")
#            
#            return f(*args, **kwargs)
#        except Exception as e:
#            # Log the full stack trace
#            logger.error(f"Exception occurred: {str(e)}")
#            logger.error(traceback.format_exc())
#            return make_response(jsonify({
#                'error': str(e),
#                'stack_trace': traceback.format_exc()
#            }), 500)
#    return decorated_function

# test route
@app.route('/test', methods=['GET'])
def test():
  return jsonify({'message': 'The server is running'})

@app.route('/api/analyze', methods=['POST'])
def analyze_patent():
    try:
        data = request.get_json()
        if data is None:
            logger.error("No JSON data in request")
            return make_response(jsonify({
                'message': 'No JSON data in request'
            }), 400)

        patent_id = data.get('patent_id')
        company_name = data.get('company_name')

        logger.debug(f"Received request - patent_id: {patent_id}, company_name: {company_name}")

        reportRecord = Report.query.filter_by(patent_publication_number=patent_id,company_name=company_name).first()
        if not reportRecord:
            if not patent_id or not company_name:
                logger.warning("Missing required parameters")
                return make_response(jsonify({
                    'message': 'Missing required parameters'
                }), 400)

            logger.debug("Calling analyzer.generate_infringement_report")
            report = analyzer.generate_infringement_report(
                patent_id,
                company_name
            )

            if not report:
                logger.warning("No report generated by analyzer")
                return make_response(jsonify({
                    'message': 'No report generated'
                }), 404)
            logger.debug("Successfully generated report")

            reportRecord = Report(
                patent_publication_number=patent_id,
                company_name=company_name,
                analysis_data=report
            )
            db.session.add(reportRecord)
            try:
                db.session.commit()
                logger.info('reportRecord imported successfully')
            except Exception as e:
                db.session.rollback()
                logger.error(f'Error importing reportRecord: {str(e)}')

            return make_response(jsonify(report), 200)
        else:
            logger.debug("Report already exists")
            return make_response(reportRecord.analysis_data, 200)

    except Exception as e:
        return make_response(jsonify({
            'error': str(e)
        }), 500)


@app.route('/api/patents', methods=['GET'])
def get_patents():
    try:
        patents = Patent.query.all()
        patents_data = [{
            'publication_number': patent.publication_number,
            'title': patent.title
            } for patent in patents
        ]
        return jsonify(patents_data), 200
    except Exception as e:
        return make_response(jsonify({'message': 'error getting patents', 'error': str(e)}), 500)

@app.route('/api/companies', methods=['GET'])
def get_companies():
    try:
        companies = Company.query.all()
        companies_data = [{
            'id': company.id,
            'name': company.name,
            'products': company.products
            } for company in companies
        ]
        return jsonify(companies_data), 200
    except Exception as e:
        return make_response(jsonify({'message': 'error getting companies', 'error': str(e)}), 500)

@app.route('/api/patent/<id>', methods=['GET'])
def get_patent_details(id):
    try:
        patent = Patent.query.filter_by(publication_number=id).first()
        if not patent:
            return make_response(jsonify({
                'message': 'patent not found'
                }), 404)

        return make_response(jsonify({
            'publication_number': patent.publication_number,
            'title': patent.title,
            'abstract': patent.abstract,
            'description': patent.description,
            'assignee': patent.assignee,
            'inventors': patent.inventors,
            'priority_date': patent.priority_date,
            'application_date': patent.application_date,
            'grant_date': patent.grant_date,
            'claims': patent.claims,
            'jurisdictions': patent.jurisdictions,
            'classifications': patent.classifications
            }), 200)
    except Exception as e:
        return make_response(jsonify({
            'error': str(e)
            }), 500)


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
